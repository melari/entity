#!/usr/bin/env ruby
require 'terrun'
require 'antlr3'
require_relative 'EntityLexer.rb'
require_relative 'EntityParser.rb'
require_relative 'libraries.rb'

def require_directory(directory)
  base_path = File.dirname(__FILE__)
  Dir.entries(base_path + '/' + directory).each do |file|
    next if file.start_with?('.')
    full_path = "#{base_path}/#{directory}/#{file}"
    require_directory(full_path) unless File.file?(full_path)
    require_relative("#{directory}/#{file}") if File.file?(full_path)
  end
end

require_directory 'evaluators'



module Entity
  class Compiler < TerminalRunner
    name "entity"

    option "--help", 0, "", "Show this help document"
    help ""

    @@capturing = -1
    @@capturing_string = []

    def self.run
      if @@options.include? "--help"
        show_usage
        exit
      end

      @@out = File.open('temp.cpp', 'w')

      input = ANTLR3::FileStream.new('example.e')
      lexer = Entity::Lexer.new(input)
      tokens = ANTLR3::CommonTokenStream.new(lexer)
      parser = Entity::Parser.new(tokens)
      eval_tree = parser.file

      add_standard_libraries

      eval_tree.register_function_types(nil)
      eval_tree.register_types(nil)
      TypeRegister.reset_context
      puts "DONE REGISTRATION"

      eval_tree.eval

      @@out.close
    end

    def self.out(string)
      if capturing?
        add_to_capture(string)
      else
        @@out.puts string unless @@out.nil?
      end
      nil
    end

    def self.capture_string
      @@capturing_string[@@capturing]
    end

    def self.capture_string=(value)
      @@capturing_string[@@capturing] = value
    end

    def self.add_to_capture(value)
      self.capture_string = capture_string + value
    end

    def self.capture
      @@capturing += 1
      self.capture_string = ""
      result = yield || capture_string
      @@capturing -= 1
      result
    end

    def self.capturing?
      @@capturing > -1
    end

    def self.add_standard_libraries
      out(Libraries.standard)
    end
  end
end

if __FILE__ == $0
  x = Entity::Compiler.start(ARGV)
end
